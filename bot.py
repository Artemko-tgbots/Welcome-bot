import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π (–ø–æ—Å–∏–ª–∞–Ω–Ω—è)
CHANNELS = [
    {"name": "–ö–∞–Ω–∞–ª 1", "link": "https://t.me/example1"},
    {"name": "–ö–∞–Ω–∞–ª 2", "link": "https://t.me/example2"},
]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—ñ–¥ aiogram 3.10+
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫ ---
async def check_subscriptions(user_id):
    for ch in CHANNELS:
        try:
            member = await bot.get_chat_member(ch["link"], user_id)
            if member.status == "left":
                return False
        except Exception:
            return False
    return True

# --- –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø ---
@dp.chat_join_request()
async def join_request_handler(event: types.ChatJoinRequest):
    user_id = event.from_user.id
    chat_title = event.chat.title

    try:
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —É—Å—ñ–º–∞ –∫–∞–Ω–∞–ª–∞–º–∏
        text = f"üëã –ü—Ä–∏–≤—ñ—Ç!\n–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É —É –∫–∞–Ω–∞–ª <b>{chat_title}</b>!\n\n"
        text += "–ü–µ—Ä—à –Ω—ñ–∂ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à—ñ –∫–∞–Ω–∞–ª–∏:\n"
        for ch in CHANNELS:
            text += f"üëâ <a href='{ch['link']}'>{ch['name']}</a>\n"

        text += "\n–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—ñ–¥–æ–º –Ω–∞—Å –∑–Ω–æ–≤—É, —ñ –º–∏ –¥–∞–º–æ –¥–æ—Å—Ç—É–ø."

        await bot.send_message(chat_id=user_id, text=text)

    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    # ‚ùå –ù–ï —Å—Ö–≤–∞–ª—é—î–º–æ –∑–∞—è–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    # –Ø–∫—â–æ —Ö–æ—á–µ—à —Å—Ö–≤–∞–ª—é–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫, –º–æ–∂–Ω–∞:
    # if await check_subscriptions(user_id):
    #     await event.approve()
    # else:
    #     await event.decline()


# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
